(use srfi-1)
(use srfi-13)
(use util.combinations)


(define (palindomic? n)
  (let1 strn (number->string n)
        (string=? strn (string-reverse strn))))

(define (p4)
  (let* ((list1 (iota 90 101 10))
         (list3 (iota 90 103 10))
         (list9 (iota 90 109 10))
         (total-list19 (cartesian-product (list list9 list1)))
         (total-list33 (cartesian-product (list list3 list3)))
         (total-list (append total-list19 total-list33)))
    (let loop ((candidates total-list)
               (answer 1)
               (x 0)
               (y 0))
      (if (null? candidates)
        (list answer x y)
        (let* ((i (caar candidates))
               (j (cadar candidates))
               (product (* i j))
               (update? (and (palindomic? product) (> product answer))))
          (loop (cdr candidates)
                (if update? product answer)
                (if update? i x)
                (if update? j y)))))))

(print (p4))
