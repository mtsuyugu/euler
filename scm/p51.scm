(use srfi-13)
(use text.tr)

(load "./eratosthenes.scm")

(define (p51)
  (define N 1000000)
  (eratosthenes N)
  (let ((prime-list (prime-list-less-than N)))
    (letrec ((keta (^n (string-length (number->string n))))
             (replace (lambda (num x n)
                        (string->number (apply string-tr (map number->string (list num x n))))))
             (check (lambda (p x replace-nums)
                      (let ((result (filter (^x x)
                                            (map (lambda (n)
                                                   (let ((result (replace p x n)))
                                                     (if (and (= (keta p) (keta result))
                                                              (prime? result))
                                                       result #f)))
                                                 replace-nums))))
                        (if (>= (length result) 7)
                          (apply min p result)
                          #f))))
             (iter (lambda (prime-list)
                     (let* ((p (car prime-list))
                            (str-p (number->string p))
                            (result (and (prime? p)
                                         (or (and (>= (string-count str-p #\0) 2)
                                                  (check p 0 (list 1 2 3 4 5 6 7 8 9)))
                                             (and (>= (string-count str-p #\1) 2)
                                                  (check p 1 (list 0 2 3 4 5 6 7 8 9)))
                                             (and (>= (string-count str-p #\2) 2)
                                                  (check p 2 (list 0 1 3 4 5 6 7 8 9)))))))
                       (if result result 
                         (iter (cdr prime-list)))))))
      (iter prime-list))))

(print (p51))
