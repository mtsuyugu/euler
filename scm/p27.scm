(use gauche.collection)
(load "./eratosthenes.scm")

(define (quadratic a b n)
  (+ (* n n) (* a n) b))

(define (consective a b)
  (let loop ((i 0))
    (let ((quad (quadratic a b i)))
      (if (or (< quad 1) (not (prime? quad)))
        i
        (loop (+ i 1))))))


(define (p27)
  (define (max-consective-with b)
    (let loop ((a -999)
               (consec 0)
               (ablist '(0 0)))
      (if (>= a b)
        (list consec ablist)
        (let* ((c (consective a b))
               (update? (> c consec)))
          (loop (+ a 1)
                (if update? c consec)
                (if update? (list a b) ablist))))))
  (eratosthenes 20000)
  (let loop ((blist (prime-list-less-than 1000))
             (consec 0)
             (ablist '(0 0)))
    (if (null? blist)
      (list consec ablist (apply * ablist))
      (let* ((b (car blist))
             (result (max-consective-with b))
             (update? (> (car result) consec)))
        (loop (cdr blist)
              (if update? (car result) consec)
              (if update? (cadr result) ablist))))))

(print (p27))
