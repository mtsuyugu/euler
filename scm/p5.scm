(use srfi-1)
(use util.list)
(load "./util.scm")

(define (prime-factorization number)
  (let1 table (make-hash-table)
    (let loop ((i 2)
               (n number))
       (if (= n 1)
         table
         (let1 factor? (% n i)
               (if factor? (hash-table-update! table i (cut + 1 <>) 0))
               (loop (if factor? i (+ i 1))
                     (if factor? (/ n i) n)))))))

(define (product ht)
  (hash-table-fold ht (lambda (k v r)
                            (* (expt k v) r)) 1))

(define (p5)
  (let ((ht (make-hash-table)))
    (for-each (lambda (x) 
                (hash-table-for-each (prime-factorization x) 
                                     (lambda (factor expo) 
                                       (if (> expo (hash-table-get ht factor 0))
                                         (hash-table-put! ht factor expo)))))
                (iota 19 2))
  (product ht)))
          
(print (p5))
