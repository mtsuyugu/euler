(define p89 (lambda ()  
  (call-with-input-file "p89.dat" (lambda (port)
    (letrec ((iter (lambda (line len1 len2)
                     (if (eof-object? line)
                       (- len1 len2)
                       (begin
;                        (print (parse-roman line))
;                        (print (format-roman (parse-roman line)))
                         (iter (read-line port)
                               (+ len1 (string-length line))
;                              0
                               (+ len2 (string-length (format-roman (parse-roman line)))))
                               )))))
      (iter (read-line port) 0 0))))))


(define (format-roman num)
  (letrec ((iter (lambda (str num) 
                   (let ((n (quotient num 1000))) 
                     (cond ((>= num 1000) 
                            (iter2 (string-append str (make-string n #\M)) 
                                   (- num (* n 1000)))) 
                           (else 
                             (iter2 str num))))))
           (iter2 (lambda (str num) 
                    (let ((n (quotient num 100))) 
                      (cond ((>= num 900) 
                             (iter3 (string-append str "CM") 
                                    (- num 900))) 
                            ((>= num 500) 
                             (iter3 (string-append str "D" (make-string (quotient (- num 500) 100) #\C)) 
                                    (- num (* n 100)))) 
                            ((>= num 400) 
                             (iter3 (string-append str "CD") 
                                    (- num 400))) 
                            (else 
                              (iter3 (string-append str (make-string n #\C)) 
                                     (- num (* n 100))))))))
           (iter3 (lambda (str num) 
                    (let ((n (quotient num 10))) 
                      (cond ((>= num 90) 
                             (iter4 (string-append str "XC") 
                                    (- num 90))) 
                            ((>= num 50) 
                             (iter4 (string-append str "L" (make-string (quotient (- num 50) 10) #\X)) 
                                    (- num (* n 10)))) 
                            ((>= num 40) 
                             (iter4 (string-append str "XL") 
                                    (- num 40))) 
                            (else 
                              (iter4 (string-append str (make-string n #\X)) 
                                     (- num (* n 10))))))))
           (iter4 (lambda (str num) 
                    (cond ((>= num 9) (string-append str "IX")) 
                          ((>= num 5) (string-append str "V" (make-string (- num 5) #\I))) 
                          ((>= num 4) (string-append str "IV")) 
                          (else (string-append str (make-string num #\I)))))))
    (iter "" num)))


(define (parse-roman str)
  (define (next-num num x y a b)
                    (+ num (- (* x (string-length b)) (* y (string-length a)))))
  (define (iter str num)
    (rxmatch-cond (test (= (string-length str) 0) num)
                  ((rxmatch #/^(C*)(M+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 1000 100 a b)))
                  ((rxmatch #/^(C*)(D+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 500 100 a b)))
                  ((rxmatch #/^(X*)(C+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 100 10 a b)))
                  ((rxmatch #/^(X*)(L+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 50 10 a b)))
                  ((rxmatch #/^(I*)(X+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 10 1 a b))) 
                  ((rxmatch #/^(I*)(V+)(.*)/ str)
                   (#f a b rest)
                   (iter rest (next-num num 5 1 a b)))
                  ((rxmatch #/^(I+)(.*)/ str)
                   (#f a rest)
                   (iter rest (+ num (string-length a))))
                  (else
                    (format #t "invalid: ~s" num)
                    #f)))
  (iter str 0))

(print (p89))

